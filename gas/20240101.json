{
    "clients": {
        "nethermind": {
            "name": "nethermind",
            "results": [
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                }
            ]
        },
        "geth": {
            "name": "geth",
            "results": [
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                }
            ]
        },
        "reth": {
            "name": "reth",
            "results": [
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                }
            ]
        },
        "erigon": {
            "name": "erigon",
            "results": [
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                }
            ]
        },
        "besu": {
            "name": "besu",
            "results": [
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                }
            ]
        }
    },
    "metadata": {
        "Warmup": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Warmup",
            "Title": "Warmup",
            "Description": "Warmup"
        },
        "Transfers": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Transfers",
            "Title": "ETH transfers",
            "Description": "All block gas limit consumed by simple ETH transfers"
        },
        "TxDataZero": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "TxDataZero",
            "Title": "Tx with big zero data",
            "Description": "Single transaction with large extra data full of zeros"
        },
        "Keccak256From1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Keccak256From1Byte",
            "Title": "Keccak256 from 1 byte",
            "Description": "Keccak calculations based on 1-byte source data"
        },
        "Keccak256From8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Keccak256From8Bytes",
            "Title": "Keccak256 from 8 bytes",
            "Description": "Keccak calculations based on 8-byte source data"
        },
        "Keccak256From32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Keccak256From32Bytes",
            "Title": "Keccak256 from 32 bytes",
            "Description": "Keccak calculations based on 32-byte source data"
        },
        "Push0": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Push0",
            "Title": "Push0",
            "Description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        },
        "Push0Pop": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Push0Pop",
            "Title": "Push0-Pop",
            "Description": "Endlessly pushing zeros to stack, then popping it"
        },
        "Gas": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Gas",
            "Title": "Gas",
            "Description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        "GasPop": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "GasPop",
            "Title": "Gas-Pop",
            "Description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        "SelfBalance": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SelfBalance",
            "Title": "SelfBalance",
            "Description": "Endlessly pushing self balance to stack (1000 per 1 contract)"
        },
        "JumpDest": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "JumpDest",
            "Title": "JumpDest",
            "Description": "Block full of JumpDest opcode only"
        },
        "MSize": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "MSize",
            "Title": "MSize",
            "Description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        "MStoreZero": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "MStoreZero",
            "Title": "MStore - zero",
            "Description": "Endlessly pushing zero value to memory with offset zero"
        },
        "MStoreRandom": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "MStoreRandom",
            "Title": "MStore - random",
            "Description": "Endlessly pushing random value to memory with offset zero"
        },
        "Caller": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Caller",
            "Title": "Caller",
            "Description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        "CallerPop": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "CallerPop",
            "Title": "Caller-Pop",
            "Description": "Endlessly pushing caller address to stack, then popping it"
        },
        "Address": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Address",
            "Title": "Address",
            "Description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        "Origin": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Origin",
            "Title": "Origin",
            "Description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        "CoinBase": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "CoinBase",
            "Title": "CoinBase",
            "Description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        "Timestamp": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Timestamp",
            "Title": "Timestamp",
            "Description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        "Number": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Number",
            "Title": "Number",
            "Description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        "PrevRandao": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "PrevRandao",
            "Title": "PrevRandao",
            "Description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        "GasLimit": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "GasLimit",
            "Title": "GasLimit",
            "Description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        "ChainId": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ChainId",
            "Title": "ChainId",
            "Description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        "BaseFee": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "BaseFee",
            "Title": "BaseFee",
            "Description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        "BlobBaseFee": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "BlobBaseFee",
            "Title": "BlobBaseFee",
            "Description": "Endlessly pushing current blob base fee to stack (1000 per 1 contract)"
        },
        "BlobHashZero": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "BlobHashZero",
            "Title": "BlobHash",
            "Description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        "CodeCopy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "CodeCopy",
            "Title": "CodeCopy",
            "Description": "Endlessly loading 32-bytes of code to the memory"
        },
        "EcRecover": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcRecover",
            "Title": "EcRecover precompile",
            "Description": "EcRecover precompile calculations"
        },
        "SHA2From1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From1Byte",
            "Title": "SHA-2 precompile from 1 byte",
            "Description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        "SHA2From8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From8Bytes",
            "Title": "SHA-2 precompile from 8 bytes",
            "Description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        "SHA2From32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From32Bytes",
            "Title": "SHA-2 precompile from 32 bytes",
            "Description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        "SHA2From128Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From128Bytes",
            "Title": "SHA-2 precompile from 128 bytes",
            "Description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        "RipemdFrom1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom1Byte",
            "Title": "Ripemd-160 precompile from 1 byte",
            "Description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        "RipemdFrom8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom8Bytes",
            "Title": "Ripemd-160 precompile from 8 bytes",
            "Description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        "RipemdFrom32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom32Bytes",
            "Title": "Ripemd-160 precompile from 32 bytes",
            "Description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        "RipemdFrom128Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom128Bytes",
            "Title": "Ripemd-160 precompile from 128 bytes",
            "Description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        "IdentityFrom1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom1Byte",
            "Title": "Identity precompile from 1 byte",
            "Description": "Identity precompile call based on 1-byte source data"
        },
        "IdentityFrom8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom8Bytes",
            "Title": "Identity precompile from 8 bytes",
            "Description": "Identity precompile call based on 8-byte source data"
        },
        "IdentityFrom32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom32Bytes",
            "Title": "Identity precompile from 32 bytes",
            "Description": "Identity precompile call based on 32-byte source data"
        },
        "IdentityFrom128Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom128Bytes",
            "Title": "Identity precompile from 128 bytes",
            "Description": "Identity precompile call based on 128-byte source data"
        },
        "ModexpMinGasBaseHeavy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpMinGasBaseHeavy",
            "Title": "Modexp min gas, base heavy",
            "Description": "Modexp precompile consuming 200 gas (minimum value), with base and modulo byte size equal 192 and exponent equal 3 (0b11 - 2x 1s in binary)"
        },
        "ModexpMinGasExpHeavy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpMinGasExpHeavy",
            "Title": "Modexp min gas, exp heavy",
            "Description": "Modexp precompile consuming 200 gas (minimum value), with base and modulo byte size equal 8 and exponent equal (603x 1s in binary)"
        },
        "ModexpMinGasBalanced": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpMinGasBalanced",
            "Title": "Modexp min gas, balanced",
            "Description": "Modexp precompile consuming 200 gas (minimum value), with base and modulo byte size equal 40 and exponent equal 2^25 - 1 (25x 1s in binary)"
        },
        "Modexp215GasExpHeavy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Modexp215GasExpHeavy",
            "Title": "Modexp 215 gas, exp heavy",
            "Description": "Modexp precompile consuming 215 gas, with base and modulo byte size equal 8 and exponent equal 2^648 - 1 (648x 1s in binary, which is max possible exponent value)"
        },
        "ModexpVulnerabilityExample1": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityExample1",
            "Title": "Modexp \"eip_example1\"",
            "Description": "Modexp precompile test case \"eip_example1\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityExample2": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityExample2",
            "Title": "Modexp \"eip_example2\"",
            "Description": "Modexp precompile test case \"eip_example2\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani1Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani1Square",
            "Title": "Modexp \"nagydani-1-square\"",
            "Description": "Modexp precompile test case \"nagydani-1-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani1Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani1Qube",
            "Title": "Modexp \"nagydani-1-qube\"",
            "Description": "Modexp precompile test case \"nagydani-1-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani1Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani1Pow0x10001",
            "Title": "Modexp \"nagydani-1-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-1-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani2Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani2Square",
            "Title": "Modexp \"nagydani-2-square\"",
            "Description": "Modexp precompile test case \"nagydani-2-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani2Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani2Qube",
            "Title": "Modexp \"nagydani-2-qube\"",
            "Description": "Modexp precompile test case \"nagydani-2-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani2Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani2Pow0x10001",
            "Title": "Modexp \"nagydani-2-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-2-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani3Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani3Square",
            "Title": "Modexp \"nagydani-3-square\"",
            "Description": "Modexp precompile test case \"nagydani-3-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani3Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani3Qube",
            "Title": "Modexp \"nagydani-3-qube\"",
            "Description": "Modexp precompile test case \"nagydani-3-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani3Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani3Pow0x10001",
            "Title": "Modexp \"nagydani-3-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-3-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani4Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani4Square",
            "Title": "Modexp \"nagydani-4-square\"",
            "Description": "Modexp precompile test case \"nagydani-4-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani4Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani4Qube",
            "Title": "Modexp \"nagydani-4-qube\"",
            "Description": "Modexp precompile test case \"nagydani-4-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani4Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani4Pow0x10001",
            "Title": "Modexp \"nagydani-4-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-4-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani5Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani5Square",
            "Title": "Modexp \"nagydani-5-square\"",
            "Description": "Modexp precompile test case \"nagydani-5-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani5Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani5Qube",
            "Title": "Modexp \"nagydani-5-qube\"",
            "Description": "Modexp precompile test case \"nagydani-5-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani5Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani5Pow0x10001",
            "Title": "Modexp \"nagydani-5-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-5-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityMarius1Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityMarius1Even",
            "Title": "Modexp \"marius-1-even\"",
            "Description": "Modexp precompile test case \"marius-1-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido1Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido1Even",
            "Title": "Modexp \"guido-1-even\"",
            "Description": "Modexp precompile test case \"guido-1-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido2Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido2Even",
            "Title": "Modexp \"guido-2-even\"",
            "Description": "Modexp precompile test case \"guido-2-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido3Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido3Even",
            "Title": "Modexp \"guido-3-even\"",
            "Description": "Modexp precompile test case \"guido-3-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido4Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido4Even",
            "Title": "Modexp \"guido-4-even\"",
            "Description": "Modexp precompile test case \"guido-4-even\" reported as potential vulnerability"
        },
        "EcAddInfinities": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcAddInfinities",
            "Title": "EcAdd with (0, 0)",
            "Description": "EcAdd precompile with both initial points with x = 0 and y = 0"
        },
        "EcAdd12": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcAdd12",
            "Title": "EcAdd with (1, 2)",
            "Description": "EcAdd precompile with both initial points with x = 1 and y = 2"
        },
        "EcAdd32ByteCoordinates": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcAdd32ByteCoordinates",
            "Title": "EcAdd with 32-byte coordinates",
            "Description": "EcAdd precompile with both initial points with x and y as 32-byte values"
        },
        "EcMulInfinities2Scalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMulInfinities2Scalar",
            "Title": "EcMul with (0, 0) and scalar 2",
            "Description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        "EcMulInfinities32ByteScalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMulInfinities32ByteScalar",
            "Title": "EcMul with (0, 0) and 32-byte scalar",
            "Description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        "EcMul122": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul122",
            "Title": "EcMul with (1, 2) and scalar 2",
            "Description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        "EcMul12And32ByteScalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul12And32ByteScalar",
            "Title": "EcMul with (1, 2) and 32-byte scalar",
            "Description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        "EcMul32ByteCoordinates2Scalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul32ByteCoordinates2Scalar",
            "Title": "EcMul with 32-byte coordinates and scalar 2",
            "Description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        "EcMul32ByteCoordinates32ByteScalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul32ByteCoordinates32ByteScalar",
            "Title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "Description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        "EcPairing0Input": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcPairing0Input",
            "Title": "EcPairing with empty input",
            "Description": "EcPairing precompile with empty input"
        },
        "EcPairing2Sets": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcPairing2Sets",
            "Title": "EcPairing with 2 sets of data",
            "Description": "EcPairing precompile with 2 sets of valid input data (6x 32-byte value)"
        },
        "Blake1Round": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake1Round",
            "Title": "Blake2f 1 round",
            "Description": "Blake2f precompile with 1 round of computations"
        },
        "Blake1KRounds": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake1KRounds",
            "Title": "Blake2f 1k rounds",
            "Description": "Blake2f precompile with 1000 rounds of computations"
        },
        "Blake1MRounds": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake1MRounds",
            "Title": "Blake2f 1M rounds",
            "Description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        "Blake10MRounds": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake10MRounds",
            "Title": "Blake2f 10M rounds",
            "Description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        "PointEvaluationOneData": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "PointEvaluationOneData",
            "Title": "Point evaluation - one data",
            "Description": "Point evaluation precompile repeating computations on the same data"
        },
        "SStoreOneAccountOneKeyZeroValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyZeroValue",
            "Title": "SStore - one storage key, repeating zero value",
            "Description": "SStore - repeating storing zero in single storage key of single account"
        },
        "SStoreOneAccountOneKeyConstantValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyConstantValue",
            "Title": "SStore - one storage key, repeating constant value",
            "Description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        "SStoreOneAccountOneKeyRandomValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyRandomValue",
            "Title": "SStore - one storage key, repeating random values",
            "Description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        "SStoreOneAccountOneKeyTwoValues": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyTwoValues",
            "Title": "SStore - one storage key, repeating two values, zero and non-zero",
            "Description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        "SStoreManyAccountsConsecutiveKeysRandomValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsConsecutiveKeysRandomValue",
            "Title": "SStore - many accounts, consecutive storage keys, random values",
            "Description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        "SStoreManyAccountsRandomKeysRandomValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsRandomKeysRandomValue",
            "Title": "SStore - many accounts, random storage keys, random values",
            "Description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        "SStoreManyAccountsConsecutiveKeysZeroValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsConsecutiveKeysZeroValue",
            "Title": "SStore - many accounts, consecutive storage keys, zero values",
            "Description": "SStore - storing zeros in consecutive storage keys of many accounts"
        },
        "SStoreManyAccountsRandomKeysZeroValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsRandomKeysZeroValue",
            "Title": "SStore - many accounts, random storage keys, zero values",
            "Description": "SStore - storing zeros in random storage keys of many accounts"
        }
    },
    "test_cases": [
        "Keccak256From32Bytes",
        "Keccak256From1Byte",
        "Keccak256From8Bytes",
        "Push0Pop",
        "MStoreZero",
        "MStoreRandom",
        "PrevRandao",
        "CoinBase",
        "Gas",
        "Number",
        "Timestamp",
        "Caller",
        "CodeCopy",
        "BaseFee",
        "EcRecover",
        "Blake1KRounds",
        "Blake1Round",
        "Blake10MRounds",
        "Blake1MRounds",
        "RipemdFrom128Bytes",
        "RipemdFrom32Bytes",
        "RipemdFrom8Bytes",
        "RipemdFrom1Byte",
        "SHA2From8Bytes",
        "SHA2From1Byte",
        "SHA2From32Bytes",
        "SHA2From128Bytes",
        "PointEvaluationOneData",
        "IdentityFrom128Bytes",
        "IdentityFrom32Bytes",
        "IdentityFrom8Bytes",
        "IdentityFrom1Byte",
        "EcMul122",
        "EcMul32ByteCoordinates2Scalar",
        "EcMul32ByteCoordinates32ByteScalar",
        "EcMulInfinities2Scalar",
        "EcMul12And32ByteScalar",
        "EcMulInfinities32ByteScalar",
        "GasLimit",
        "JumpDest",
        "SStoreOneAccountOneKeyZeroValue",
        "SStoreManyAccountsConsecutiveKeysRandomValue",
        "SStoreOneAccountOneKeyConstantValue",
        "SStoreOneAccountOneKeyTwoValues",
        "SStoreManyAccountsRandomKeysRandomValue",
        "SStoreOneAccountOneKeyRandomValue",
        "BlobHashZero",
        "Address",
        "GasPop",
        "Origin",
        "CallerPop",
        "MSize",
        "Push0",
        "Transfers",
        "ChainId"
    ]
}